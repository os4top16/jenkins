#!groovy

String workspace = "/opt/workspace"
@Library('jenkins') _

def tools = new org.devops.tools()


pipeline {
    agent { 
        node {
        label 'master' //指定运行节点的标签或者名称
        customWorkspace "${workspace}"//指定运行工作目录
        }
    }
    environment { //环境变量
        ServerName = 'AA'
        Port = '22'
    }
    parameters { //字符串参数
		string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
    }
	triggers { //cron 计划任务定期执行构建。
		cron('H */4 * * 1-5') 
	}
    options {
        timestamps() //日志会有时间
        skipDefaultCheckout() // 删除隐式checkout scm语句
        // disableConcurrentBuilds() //禁止并行
        timeout(time: 1, unit: 'HOURS') //流水线超时设置
    }

    stages {
        //下载代码
        stage('GetCode') { //阶段名称
            steps { //步骤
				script{
					print("下载代码")
					tools.PrintMes("下载代码",'green')
					print("get code success")
					echo '${ServerName}'
					echo "Hello ${params.PERSON}"
					sh 'mvn --version'
				}
                
            }
        }
        stage('CodeScan') { 
            steps { 
				script{
					print("代码扫描")
					tools.PrintMes("代码扫描",'green')
				}
                
            }
        }
        stage('CodeBuild') { 
            steps { 
				script{
					print("开始构建")
					tools.PrintMes("构建成功",'green')
				}
            }
        }
        stage('Deploy') {
            steps { 
                tools.PrintMes("部署成功",'green')
            }
        }
 
    }
    post { //完成时动作
        always {
            print('流水线已经执行')
        }
        success {
						tools.PrintMex("流水线执行成功",'green')
        }
        failure {
						tools.PrintMex("流水线执行失败",'red')
        }
        unstable {
            tools.PrintMex("流水线执行不稳定",'red')
        }
        changed {
            print('仅当管道的状态已更改时，此命令才能运行')
            print('例如，如果管道以前失败了，但现在成功了')
        }
    }
}
